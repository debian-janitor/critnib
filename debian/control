Source: critnib
Priority: optional
Maintainer: Adam Borowski <kilobyte@angband.pl>
Build-Depends: debhelper-compat (= 13), cmake
Standards-Version: 4.6.2
Section: libs
Homepage: https://github.com/kilobyte/critnib
Vcs-Browser: https://github.com/kilobyte/critnib/tree/debian
Vcs-Git: https://github.com/kilobyte/critnib.git -b debian
Rules-Requires-Root: no
Description: ordered map data structure with lock-free reads
 Critnib is a data structure that provides a very fast equal and
 less-than/greater-than searches; it is a mix between DJBerstein's
 critbit and radix trees.  While in bad cases it has worse memory use
 than binary trees, it works well on real-life data which tends to
 have a limited number of "decision bits":
  * fully random: divergence happens immediately
  * malloc addresses: clumps of distinct bits in the middle
  * sequences: only lowest bits are filled
 .
 This library ships only uintptr_tâ†’uintptr_t mappings, optimized for
 reads from a very critical section but not so frequent writes.  Other
 variants also exist (such as fully lock-free writes, keys of arbitrary
 length), and can be added upon request.

Package: libcritnib-dev
Section: libdevel
Architecture: any
Multi-Arch: same
Depends: libcritnib1 (= ${binary:Version}), ${misc:Depends}
Description: ${source:Synopsis}
 ${source:Extended-Description}
 .
 This package contains the development headers.

Package: libcritnib1
Architecture: any
Multi-Arch: same
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: ${source:Synopsis}
 ${source:Extended-Description}
